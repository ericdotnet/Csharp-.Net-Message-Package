// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(25)
            {
                { typeof(global::Sandbox.TestObject.PrimitiveObject[]), 0 },
                { typeof(global::System.Collections.Generic.Dictionary<string, global::Sandbox.TestObject.PrimitiveObject>), 1 },
                { typeof(global::System.Collections.Generic.List<global::Sandbox.TestObject.PrimitiveObject>), 2 },
                { typeof(global::Sandbox.Sex), 3 },
                { typeof(global::SharedData.ByteEnum), 4 },
                { typeof(global::Sandbox.IHogeMoge), 5 },
                { typeof(global::Sandbox.IUnionSample), 6 },
                { typeof(global::Sandbox.BarClass), 7 },
                { typeof(global::Sandbox.Callback1), 8 },
                { typeof(global::Sandbox.FooClass), 9 },
                { typeof(global::Sandbox.IntKeySample), 10 },
                { typeof(global::Sandbox.MyClass), 11 },
                { typeof(global::Sandbox.Person), 12 },
                { typeof(global::Sandbox.Point), 13 },
                { typeof(global::Sandbox.Sample1), 14 },
                { typeof(global::Sandbox.Sample2), 15 },
                { typeof(global::Sandbox.SampleCallback), 16 },
                { typeof(global::Sandbox.SimpleIntKeyData), 17 },
                { typeof(global::Sandbox.StringKeySerializerTarget2), 18 },
                { typeof(global::Sandbox.Takox), 19 },
                { typeof(global::Sandbox.TestObject), 20 },
                { typeof(global::Sandbox.TestObject.PrimitiveObject), 21 },
                { typeof(global::SharedData.SimpleStringKeyData), 22 },
                { typeof(global::SharedData.SimpleStructIntKeyData), 23 },
                { typeof(global::SharedData.SimpleStructStringKeyData), 24 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ArrayFormatter<global::Sandbox.TestObject.PrimitiveObject>();
                case 1: return new global::MessagePack.Formatters.DictionaryFormatter<string, global::Sandbox.TestObject.PrimitiveObject>();
                case 2: return new global::MessagePack.Formatters.ListFormatter<global::Sandbox.TestObject.PrimitiveObject>();
                case 3: return new MessagePack.Formatters.Sandbox.SexFormatter();
                case 4: return new MessagePack.Formatters.SharedData.ByteEnumFormatter();
                case 5: return new MessagePack.Formatters.Sandbox.IHogeMogeFormatter();
                case 6: return new MessagePack.Formatters.Sandbox.IUnionSampleFormatter();
                case 7: return new MessagePack.Formatters.Sandbox.BarClassFormatter();
                case 8: return new MessagePack.Formatters.Sandbox.Callback1Formatter();
                case 9: return new MessagePack.Formatters.Sandbox.FooClassFormatter();
                case 10: return new MessagePack.Formatters.Sandbox.IntKeySampleFormatter();
                case 11: return new MessagePack.Formatters.Sandbox.MyClassFormatter();
                case 12: return new MessagePack.Formatters.Sandbox.PersonFormatter();
                case 13: return new MessagePack.Formatters.Sandbox.PointFormatter();
                case 14: return new MessagePack.Formatters.Sandbox.Sample1Formatter();
                case 15: return new MessagePack.Formatters.Sandbox.Sample2Formatter();
                case 16: return new MessagePack.Formatters.Sandbox.SampleCallbackFormatter();
                case 17: return new MessagePack.Formatters.Sandbox.SimpleIntKeyDataFormatter();
                case 18: return new MessagePack.Formatters.Sandbox.StringKeySerializerTarget2Formatter();
                case 19: return new MessagePack.Formatters.Sandbox.TakoxFormatter();
                case 20: return new MessagePack.Formatters.Sandbox.TestObjectFormatter();
                case 21: return new MessagePack.Formatters.Sandbox.TestObject_PrimitiveObjectFormatter();
                case 22: return new MessagePack.Formatters.SharedData.SimpleStringKeyDataFormatter();
                case 23: return new MessagePack.Formatters.SharedData.SimpleStructIntKeyDataFormatter();
                case 24: return new MessagePack.Formatters.SharedData.SimpleStructStringKeyDataFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Sandbox
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class SexFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Sandbox.Sex>
    {
        public void Serialize(ref MessagePackWriter writer, global::Sandbox.Sex value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((SByte)value);
        }

        public global::Sandbox.Sex Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Sandbox.Sex)reader.ReadSByte();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.SharedData
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class ByteEnumFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::SharedData.ByteEnum>
    {
        public void Serialize(ref MessagePackWriter writer, global::SharedData.ByteEnum value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Byte)value);
        }

        public global::SharedData.ByteEnum Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::SharedData.ByteEnum)reader.ReadByte();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Sandbox
{
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using MessagePack;

    public sealed class IHogeMogeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Sandbox.IHogeMoge>
    {
        private readonly Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly Dictionary<int, int> keyToJumpMap;

        public IHogeMogeFormatter()
        {
            this.typeToKeyAndJumpMap = new Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>>(2, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::Sandbox.HogeMoge1).TypeHandle, new KeyValuePair<int, int>(0, 0) },
                { typeof(global::Sandbox.HogeMoge2).TypeHandle, new KeyValuePair<int, int>(1, 1) },
            };
            this.keyToJumpMap = new Dictionary<int, int>(2)
            {
                { 0, 0 },
                { 1, 1 },
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Sandbox.IHogeMoge value, global::MessagePack.MessagePackSerializerOptions options)
        {
            KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        options.Resolver.GetFormatterWithVerify<global::Sandbox.HogeMoge1>().Serialize(ref writer, (global::Sandbox.HogeMoge1)value, options);
                        break;
                    case 1:
                        options.Resolver.GetFormatterWithVerify<global::Sandbox.HogeMoge2>().Serialize(ref writer, (global::Sandbox.HogeMoge2)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::Sandbox.IHogeMoge Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new InvalidOperationException("Invalid Union data was detected. Type:global::Sandbox.IHogeMoge");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::Sandbox.IHogeMoge result = null;
            switch (key)
            {
                case 0:
                    result = (global::Sandbox.IHogeMoge)options.Resolver.GetFormatterWithVerify<global::Sandbox.HogeMoge1>().Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::Sandbox.IHogeMoge)options.Resolver.GetFormatterWithVerify<global::Sandbox.HogeMoge2>().Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }

    public sealed class IUnionSampleFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Sandbox.IUnionSample>
    {
        private readonly Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly Dictionary<int, int> keyToJumpMap;

        public IUnionSampleFormatter()
        {
            this.typeToKeyAndJumpMap = new Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>>(2, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::Sandbox.FooClass).TypeHandle, new KeyValuePair<int, int>(0, 0) },
                { typeof(global::Sandbox.BarClass).TypeHandle, new KeyValuePair<int, int>(100, 1) },
            };
            this.keyToJumpMap = new Dictionary<int, int>(2)
            {
                { 0, 0 },
                { 100, 1 },
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Sandbox.IUnionSample value, global::MessagePack.MessagePackSerializerOptions options)
        {
            KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        options.Resolver.GetFormatterWithVerify<global::Sandbox.FooClass>().Serialize(ref writer, (global::Sandbox.FooClass)value, options);
                        break;
                    case 1:
                        options.Resolver.GetFormatterWithVerify<global::Sandbox.BarClass>().Serialize(ref writer, (global::Sandbox.BarClass)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::Sandbox.IUnionSample Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new InvalidOperationException("Invalid Union data was detected. Type:global::Sandbox.IUnionSample");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::Sandbox.IUnionSample result = null;
            switch (key)
            {
                case 0:
                    result = (global::Sandbox.IUnionSample)options.Resolver.GetFormatterWithVerify<global::Sandbox.FooClass>().Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::Sandbox.IUnionSample)options.Resolver.GetFormatterWithVerify<global::Sandbox.BarClass>().Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }


}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Sandbox
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class BarClassFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Sandbox.BarClass>
    {


        public void Serialize(ref MessagePackWriter writer, global::Sandbox.BarClass value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.OPQ, options);
        }

        public global::Sandbox.BarClass Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __OPQ__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __OPQ__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Sandbox.BarClass();
            ____result.OPQ = __OPQ__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Callback1Formatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Sandbox.Callback1>
    {


        public void Serialize(ref MessagePackWriter writer, global::Sandbox.Callback1 value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            value.OnBeforeSerialize();
            writer.WriteArrayHeader(1);
            writer.Write(value.X);
        }

        public global::Sandbox.Callback1 Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __X__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __X__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Sandbox.Callback1(__X__);
            ____result.X = __X__;
            ____result.OnAfterDeserialize();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class FooClassFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Sandbox.FooClass>
    {


        public void Serialize(ref MessagePackWriter writer, global::Sandbox.FooClass value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            writer.Write(value.XYZ);
        }

        public global::Sandbox.FooClass Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __XYZ__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __XYZ__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Sandbox.FooClass();
            ____result.XYZ = __XYZ__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class IntKeySampleFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Sandbox.IntKeySample>
    {


        public void Serialize(ref MessagePackWriter writer, global::Sandbox.IntKeySample value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(11);
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.Write(value.A);
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.Write(value.B);
        }

        public global::Sandbox.IntKeySample Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __A__ = default(int);
            var __B__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 3:
                        __A__ = reader.ReadInt32();
                        break;
                    case 10:
                        __B__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Sandbox.IntKeySample();
            ____result.A = __A__;
            ____result.B = __B__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MyClassFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Sandbox.MyClass>
    {


        public void Serialize(ref MessagePackWriter writer, global::Sandbox.MyClass value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            writer.Write(value.Age);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.FirstName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.LastName, options);
        }

        public global::Sandbox.MyClass Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Age__ = default(int);
            var __FirstName__ = default(string);
            var __LastName__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Age__ = reader.ReadInt32();
                        break;
                    case 1:
                        __FirstName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __LastName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Sandbox.MyClass();
            ____result.Age = __Age__;
            ____result.FirstName = __FirstName__;
            ____result.LastName = __LastName__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PersonFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Sandbox.Person>
    {


        public void Serialize(ref MessagePackWriter writer, global::Sandbox.Person value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            writer.Write(value.Age);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.FirstName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.LastName, options);
            formatterResolver.GetFormatterWithVerify<global::Sandbox.Sex>().Serialize(ref writer, value.Sex, options);
        }

        public global::Sandbox.Person Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Age__ = default(int);
            var __FirstName__ = default(string);
            var __LastName__ = default(string);
            var __Sex__ = default(global::Sandbox.Sex);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Age__ = reader.ReadInt32();
                        break;
                    case 1:
                        __FirstName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __LastName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Sex__ = formatterResolver.GetFormatterWithVerify<global::Sandbox.Sex>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Sandbox.Person();
            ____result.Age = __Age__;
            ____result.FirstName = __FirstName__;
            ____result.LastName = __LastName__;
            ____result.Sex = __Sex__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PointFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Sandbox.Point>
    {


        public void Serialize(ref MessagePackWriter writer, global::Sandbox.Point value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.Write(value.X);
            writer.Write(value.Y);
        }

        public global::Sandbox.Point Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __X__ = default(int);
            var __Y__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __X__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Y__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Sandbox.Point(__X__, __Y__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Sample1Formatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Sandbox.Sample1>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public Sample1Formatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Foo", 0 },
                { "Bar", 1 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Foo"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Bar"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Sandbox.Sample1 value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Foo);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.Bar);
        }

        public global::Sandbox.Sample1 Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Foo__ = default(int);
            var __Bar__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Foo__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Bar__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Sandbox.Sample1();
            ____result.Foo = __Foo__;
            ____result.Bar = __Bar__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Sample2Formatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Sandbox.Sample2>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public Sample2Formatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "foo", 0 },
                { "bar", 1 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("foo"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("bar"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Sandbox.Sample2 value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Foo);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.Bar);
        }

        public global::Sandbox.Sample2 Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Foo__ = default(int);
            var __Bar__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Foo__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Bar__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Sandbox.Sample2();
            ____result.Foo = __Foo__;
            ____result.Bar = __Bar__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SampleCallbackFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Sandbox.SampleCallback>
    {


        public void Serialize(ref MessagePackWriter writer, global::Sandbox.SampleCallback value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            value.OnBeforeSerialize();
            writer.WriteArrayHeader(1);
            writer.Write(value.Key);
        }

        public global::Sandbox.SampleCallback Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Key__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Key__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Sandbox.SampleCallback();
            ____result.Key = __Key__;
            ____result.OnAfterDeserialize();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SimpleIntKeyDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Sandbox.SimpleIntKeyData>
    {


        public void Serialize(ref MessagePackWriter writer, global::Sandbox.SimpleIntKeyData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            writer.Write(value.Prop1);
            formatterResolver.GetFormatterWithVerify<global::SharedData.ByteEnum>().Serialize(ref writer, value.Prop2, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Prop3, options);
            formatterResolver.GetFormatterWithVerify<global::SharedData.SimpleStringKeyData>().Serialize(ref writer, value.Prop4, options);
            formatterResolver.GetFormatterWithVerify<global::SharedData.SimpleStructIntKeyData>().Serialize(ref writer, value.Prop5, options);
            formatterResolver.GetFormatterWithVerify<global::SharedData.SimpleStructStringKeyData>().Serialize(ref writer, value.Prop6, options);
            formatterResolver.GetFormatterWithVerify<byte[]>().Serialize(ref writer, value.BytesSpecial, options);
        }

        public global::Sandbox.SimpleIntKeyData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Prop1__ = default(int);
            var __Prop2__ = default(global::SharedData.ByteEnum);
            var __Prop3__ = default(string);
            var __Prop4__ = default(global::SharedData.SimpleStringKeyData);
            var __Prop5__ = default(global::SharedData.SimpleStructIntKeyData);
            var __Prop6__ = default(global::SharedData.SimpleStructStringKeyData);
            var __BytesSpecial__ = default(byte[]);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Prop1__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Prop2__ = formatterResolver.GetFormatterWithVerify<global::SharedData.ByteEnum>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Prop3__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Prop4__ = formatterResolver.GetFormatterWithVerify<global::SharedData.SimpleStringKeyData>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Prop5__ = formatterResolver.GetFormatterWithVerify<global::SharedData.SimpleStructIntKeyData>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Prop6__ = formatterResolver.GetFormatterWithVerify<global::SharedData.SimpleStructStringKeyData>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __BytesSpecial__ = formatterResolver.GetFormatterWithVerify<byte[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Sandbox.SimpleIntKeyData();
            ____result.Prop1 = __Prop1__;
            ____result.Prop2 = __Prop2__;
            ____result.Prop3 = __Prop3__;
            ____result.Prop4 = __Prop4__;
            ____result.Prop5 = __Prop5__;
            ____result.Prop6 = __Prop6__;
            ____result.BytesSpecial = __BytesSpecial__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class StringKeySerializerTarget2Formatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Sandbox.StringKeySerializerTarget2>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public StringKeySerializerTarget2Formatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "TotalQuestions", 0 },
                { "TotalUnanswered", 1 },
                { "QuestionsPerMinute", 2 },
                { "AnswersPerMinute", 3 },
                { "TotalVotes", 4 },
                { "BadgesPerMinute", 5 },
                { "NewActiveUsers", 6 },
                { "ApiRevision", 7 },
                { "Site", 8 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("TotalQuestions"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("TotalUnanswered"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("QuestionsPerMinute"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("AnswersPerMinute"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("TotalVotes"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("BadgesPerMinute"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("NewActiveUsers"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("ApiRevision"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Site"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Sandbox.StringKeySerializerTarget2 value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(9);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.TotalQuestions);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.TotalUnanswered);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.Write(value.QuestionsPerMinute);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.Write(value.AnswersPerMinute);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.Write(value.TotalVotes);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.Write(value.BadgesPerMinute);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.Write(value.NewActiveUsers);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.Write(value.ApiRevision);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.Write(value.Site);
        }

        public global::Sandbox.StringKeySerializerTarget2 Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __TotalQuestions__ = default(int);
            var __TotalUnanswered__ = default(int);
            var __QuestionsPerMinute__ = default(int);
            var __AnswersPerMinute__ = default(int);
            var __TotalVotes__ = default(int);
            var __BadgesPerMinute__ = default(int);
            var __NewActiveUsers__ = default(int);
            var __ApiRevision__ = default(int);
            var __Site__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __TotalQuestions__ = reader.ReadInt32();
                        break;
                    case 1:
                        __TotalUnanswered__ = reader.ReadInt32();
                        break;
                    case 2:
                        __QuestionsPerMinute__ = reader.ReadInt32();
                        break;
                    case 3:
                        __AnswersPerMinute__ = reader.ReadInt32();
                        break;
                    case 4:
                        __TotalVotes__ = reader.ReadInt32();
                        break;
                    case 5:
                        __BadgesPerMinute__ = reader.ReadInt32();
                        break;
                    case 6:
                        __NewActiveUsers__ = reader.ReadInt32();
                        break;
                    case 7:
                        __ApiRevision__ = reader.ReadInt32();
                        break;
                    case 8:
                        __Site__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Sandbox.StringKeySerializerTarget2();
            ____result.TotalQuestions = __TotalQuestions__;
            ____result.TotalUnanswered = __TotalUnanswered__;
            ____result.QuestionsPerMinute = __QuestionsPerMinute__;
            ____result.AnswersPerMinute = __AnswersPerMinute__;
            ____result.TotalVotes = __TotalVotes__;
            ____result.BadgesPerMinute = __BadgesPerMinute__;
            ____result.NewActiveUsers = __NewActiveUsers__;
            ____result.ApiRevision = __ApiRevision__;
            ____result.Site = __Site__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class TakoxFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Sandbox.Takox>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public TakoxFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "hoga", 0 },
                { "huga", 1 },
                { "tako", 2 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("hoga"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("huga"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("tako"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Sandbox.Takox value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.hoga);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.huga);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.Write(value.tako);
        }

        public global::Sandbox.Takox Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __hoga__ = default(int);
            var __huga__ = default(int);
            var __tako__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __hoga__ = reader.ReadInt32();
                        break;
                    case 1:
                        __huga__ = reader.ReadInt32();
                        break;
                    case 2:
                        __tako__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Sandbox.Takox();
            ____result.hoga = __hoga__;
            ____result.huga = __huga__;
            ____result.tako = __tako__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class TestObjectFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Sandbox.TestObject>
    {


        public void Serialize(ref MessagePackWriter writer, global::Sandbox.TestObject value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<global::Sandbox.TestObject.PrimitiveObject[]>().Serialize(ref writer, value.objectArray, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Sandbox.TestObject.PrimitiveObject>>().Serialize(ref writer, value.objectList, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, global::Sandbox.TestObject.PrimitiveObject>>().Serialize(ref writer, value.objectMap, options);
        }

        public global::Sandbox.TestObject Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __objectArray__ = default(global::Sandbox.TestObject.PrimitiveObject[]);
            var __objectList__ = default(global::System.Collections.Generic.List<global::Sandbox.TestObject.PrimitiveObject>);
            var __objectMap__ = default(global::System.Collections.Generic.Dictionary<string, global::Sandbox.TestObject.PrimitiveObject>);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __objectArray__ = formatterResolver.GetFormatterWithVerify<global::Sandbox.TestObject.PrimitiveObject[]>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __objectList__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Sandbox.TestObject.PrimitiveObject>>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __objectMap__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, global::Sandbox.TestObject.PrimitiveObject>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Sandbox.TestObject();
            ____result.objectArray = __objectArray__;
            ____result.objectList = __objectList__;
            ____result.objectMap = __objectMap__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class TestObject_PrimitiveObjectFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Sandbox.TestObject.PrimitiveObject>
    {


        public void Serialize(ref MessagePackWriter writer, global::Sandbox.TestObject.PrimitiveObject value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            writer.Write(value.v_int);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.v_str, options);
            writer.Write(value.v_float);
            writer.Write(value.v_bool);
        }

        public global::Sandbox.TestObject.PrimitiveObject Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __v_int__ = default(int);
            var __v_str__ = default(string);
            var __v_float__ = default(float);
            var __v_bool__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __v_int__ = reader.ReadInt32();
                        break;
                    case 1:
                        __v_str__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __v_float__ = reader.ReadSingle();
                        break;
                    case 3:
                        __v_bool__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Sandbox.TestObject.PrimitiveObject(__v_int__, __v_str__, __v_float__, __v_bool__);
            ____result.v_int = __v_int__;
            ____result.v_str = __v_str__;
            ____result.v_float = __v_float__;
            ____result.v_bool = __v_bool__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.SharedData
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class SimpleStringKeyDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::SharedData.SimpleStringKeyData>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public SimpleStringKeyDataFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Prop1", 0 },
                { "Prop2", 1 },
                { "Prop3", 2 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Prop1"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Prop2"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Prop3"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::SharedData.SimpleStringKeyData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Prop1);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::SharedData.ByteEnum>().Serialize(ref writer, value.Prop2, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.Write(value.Prop3);
        }

        public global::SharedData.SimpleStringKeyData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Prop1__ = default(int);
            var __Prop2__ = default(global::SharedData.ByteEnum);
            var __Prop3__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Prop1__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Prop2__ = formatterResolver.GetFormatterWithVerify<global::SharedData.ByteEnum>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Prop3__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::SharedData.SimpleStringKeyData();
            ____result.Prop1 = __Prop1__;
            ____result.Prop2 = __Prop2__;
            ____result.Prop3 = __Prop3__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SimpleStructIntKeyDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::SharedData.SimpleStructIntKeyData>
    {


        public void Serialize(ref MessagePackWriter writer, global::SharedData.SimpleStructIntKeyData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            writer.Write(value.X);
            writer.Write(value.Y);
            formatterResolver.GetFormatterWithVerify<byte[]>().Serialize(ref writer, value.BytesSpecial, options);
        }

        public global::SharedData.SimpleStructIntKeyData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __X__ = default(int);
            var __Y__ = default(int);
            var __BytesSpecial__ = default(byte[]);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __X__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Y__ = reader.ReadInt32();
                        break;
                    case 2:
                        __BytesSpecial__ = formatterResolver.GetFormatterWithVerify<byte[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::SharedData.SimpleStructIntKeyData();
            ____result.X = __X__;
            ____result.Y = __Y__;
            ____result.BytesSpecial = __BytesSpecial__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SimpleStructStringKeyDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::SharedData.SimpleStructStringKeyData>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public SimpleStructStringKeyDataFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "key-X", 0 },
                { "key-Y", 1 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("key-X"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("key-Y"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::SharedData.SimpleStructStringKeyData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.X);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.Y, options);
        }

        public global::SharedData.SimpleStructStringKeyData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __X__ = default(int);
            var __Y__ = default(int[]);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __X__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Y__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::SharedData.SimpleStructStringKeyData();
            ____result.X = __X__;
            ____result.Y = __Y__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

