MessagePack.ExtensionHeader.ExtensionHeader() -> void
MessagePack.ExtensionResult.ExtensionResult() -> void
MessagePack.FormatterNotRegisteredException.FormatterNotRegisteredException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
MessagePack.Formatters.HalfFormatter
MessagePack.Formatters.HalfFormatter.Deserialize(ref MessagePack.MessagePackReader reader, MessagePack.MessagePackSerializerOptions options) -> System.Half
MessagePack.Formatters.HalfFormatter.Serialize(ref MessagePack.MessagePackWriter writer, System.Half value, MessagePack.MessagePackSerializerOptions options) -> void
MessagePack.MessagePackReader.MessagePackReader() -> void
MessagePack.MessagePackSerializerOptions.SequencePool.get -> MessagePack.SequencePool
MessagePack.MessagePackSerializerOptions.WithPool(MessagePack.SequencePool pool) -> MessagePack.MessagePackSerializerOptions
MessagePack.MessagePackStreamReader.MessagePackStreamReader(System.IO.Stream stream, bool leaveOpen, MessagePack.SequencePool sequencePool) -> void
MessagePack.MessagePackWriter.MessagePackWriter() -> void
MessagePack.SequencePool
MessagePack.SequencePool.SequencePool() -> void
MessagePack.SequencePool.SequencePool(int maxSize) -> void
MessagePack.SequencePool.SequencePool(int maxSize, System.Buffers.ArrayPool<byte> arrayPool) -> void
MessagePack.TinyJsonException.TinyJsonException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
static MessagePack.Nil.operator !=(MessagePack.Nil left, MessagePack.Nil right) -> bool
static MessagePack.Nil.operator ==(MessagePack.Nil left, MessagePack.Nil right) -> bool
static readonly MessagePack.Formatters.HalfFormatter.Instance -> MessagePack.Formatters.IMessagePackFormatter<System.Half>
virtual MessagePack.MessagePackStreamReader.Dispose(bool disposing) -> void
