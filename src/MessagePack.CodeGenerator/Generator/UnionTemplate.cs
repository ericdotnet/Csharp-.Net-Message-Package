// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 15.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace MessagePack.CodeGenerator.Generator
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class UnionTemplate : UnionTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\nnamespace ");
            
            #line 7 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    using System;\r\n\tusing System.Collections.Generic;\r\n    using MessagePack" +
                    ";\r\n\r\n");
            
            #line 13 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
 foreach(var info in unionSerializationInfos) { 
            
            #line default
            #line hidden
            this.Write("    public sealed class ");
            
            #line 14 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(info.Name));
            
            #line default
            #line hidden
            this.Write("Formatter : global::MessagePack.Formatters.IMessagePackFormatter<");
            
            #line 14 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(info.FullName));
            
            #line default
            #line hidden
            this.Write(">\r\n    {\r\n\t\treadonly Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>> typeTo" +
                    "KeyAndJumpMap;\r\n\t\treadonly Dictionary<int, int> keyToJumpMap;\r\n\r\n\t\tpublic ");
            
            #line 19 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(info.Name));
            
            #line default
            #line hidden
            this.Write("Formatter()\r\n\t\t{\r\n\t\t\tthis.typeToKeyAndJumpMap = new Dictionary<RuntimeTypeHandle," +
                    " KeyValuePair<int, int>>(");
            
            #line 21 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(info.SubTypes.Length));
            
            #line default
            #line hidden
            this.Write(", global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)\r\n\t\t\t{\r\n" +
                    "");
            
            #line 23 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
 for(var i = 0; i < info.SubTypes.Length; i++) { var item = info.SubTypes[i]; 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t{ typeof(");
            
            #line 24 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Type));
            
            #line default
            #line hidden
            this.Write(").TypeHandle, new KeyValuePair<int, int>(");
            
            #line 24 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Key));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 24 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write(") },\r\n");
            
            #line 25 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t};\r\n\t\t\tthis.keyToJumpMap = new Dictionary<int, int>(");
            
            #line 27 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(info.SubTypes.Length));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t\t{\r\n");
            
            #line 29 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
 for(var i = 0; i < info.SubTypes.Length; i++) { var item = info.SubTypes[i]; 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t{ ");
            
            #line 30 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Key));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 30 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write(" },\r\n");
            
            #line 31 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t};\r\n\t\t}\r\n\r\n        public int Serialize(ref byte[] bytes, int offset, ");
            
            #line 35 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(info.FullName));
            
            #line default
            #line hidden
            this.Write(@" value, global::MessagePack.IFormatterResolver formatterResolver)
        {
			KeyValuePair<int, int> keyValuePair;
			if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
			{
				var startOffset = offset;
				offset += MessagePackBinary.WriteFixedArrayHeaderUnsafe(ref bytes, offset, 2);
				offset += MessagePackBinary.WriteInt32(ref bytes, offset, keyValuePair.Key);
				switch (keyValuePair.Value)
				{
");
            
            #line 45 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
 for(var i = 0; i < info.SubTypes.Length; i++) { var item = info.SubTypes[i]; 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\tcase ");
            
            #line 46 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write(":\r\n\t\t\t\t\t\toffset += formatterResolver.GetFormatterWithVerify<");
            
            #line 47 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Type));
            
            #line default
            #line hidden
            this.Write(">().Serialize(ref bytes, offset, (");
            
            #line 47 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Type));
            
            #line default
            #line hidden
            this.Write(")value, formatterResolver);\r\n\t\t\t\t\t\tbreak;\r\n");
            
            #line 49 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn offset - startOffset;\r\n\t\t\t}\r\n\r\n\t" +
                    "\t\treturn MessagePackBinary.WriteNil(ref bytes, offset);\r\n        }\r\n        \r\n  " +
                    "      public ");
            
            #line 60 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(info.FullName));
            
            #line default
            #line hidden
            this.Write(@" Deserialize(byte[] bytes, int offset, global::MessagePack.IFormatterResolver formatterResolver, out int readSize)
        {
            if (MessagePackBinary.IsNil(bytes, offset))
			{
				readSize = 1;
				return null;
			}

			var startOffset = offset;
			
			if (MessagePackBinary.ReadArrayHeader(bytes, offset, out readSize) != 2)
			{
				throw new InvalidOperationException(""Invalid Union data was detected. Type:");
            
            #line 72 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(info.FullName));
            
            #line default
            #line hidden
            this.Write("\");\r\n\t\t\t}\r\n\t\t\toffset += readSize;\r\n\r\n\t\t\tvar key = MessagePackBinary.ReadInt32(byt" +
                    "es, offset, out readSize);\r\n\t\t\toffset += readSize;\r\n\r\n\t\t\t");
            
            #line 79 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(info.FullName));
            
            #line default
            #line hidden
            this.Write(" result = null;\r\n\t\t\tswitch (key)\r\n\t\t\t{\r\n");
            
            #line 82 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
 for(var i = 0; i < info.SubTypes.Length; i++) { var item = info.SubTypes[i]; 
            
            #line default
            #line hidden
            this.Write("\t\t\t\tcase ");
            
            #line 83 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write(":\r\n\t\t\t\t\tresult = (");
            
            #line 84 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(info.FullName));
            
            #line default
            #line hidden
            this.Write(")formatterResolver.GetFormatterWithVerify<");
            
            #line 84 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Type));
            
            #line default
            #line hidden
            this.Write(">().Deserialize(bytes, offset, formatterResolver, out readSize);\r\n\t\t\t\t\toffset += " +
                    "readSize;\r\n\t\t\t\t\tbreak;\r\n");
            
            #line 87 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\tdefault:\r\n\t\t\t\t\toffset += MessagePackBinary.ReadNext(bytes, offset);\r\n\t\t\t\t\tbre" +
                    "ak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treadSize = offset - startOffset;\r\n\t\t\t\r\n\t\t\treturn result;\r\n   " +
                    "     }\r\n    }\r\n\r\n");
            
            #line 99 "C:\Users\neuecc\Documents\neuecc\MessagePack\src\MessagePack.CodeGenerator\Generator\UnionTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class UnionTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
